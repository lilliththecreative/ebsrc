;A: Layer 1 ID, X: Layer 2 ID, Y: Letterbox style
LOAD_BATTLE_BG: ;$C2D121
	REP #PROC_FLAGS::ACCUM8 | PROC_FLAGS::INDEX8 | PROC_FLAGS::CARRY
	RESERVE_STACK_SPACE 48
	STY $2E
	STX $04
	STX $2C
	STA $02
	STZ RED_FLASH_DURATION
	STZ GREEN_FLASH_DURATION
	STZ SHAKE_DURATION
	STZ WOBBLE_DURATION
	STZ SCREEN_EFFECT_MINIMUM_WAIT_FRAMES
	STZ VERTICAL_SHAKE_HOLD_DURATION
	STZ VERTICAL_SHAKE_DURATION
	LDA $2E
	AND #$0003
	BEQ @NO_LETTERBOX
	CMP #LETTERBOX_STYLE::LARGE
	BEQ @LARGE_LETTERBOX
	CMP #LETTERBOX_STYLE::MEDIUM
	BEQ @MEDIUM_LETTERBOX
	CMP #LETTERBOX_STYLE::SMALL
	BEQ @SMALL_LETTERBOX
	BRA @LETTERBOX_SETUP_DONE
@NO_LETTERBOX:
	STZ LETTERBOX_TOP_END
	LDA #SCREEN_Y_RESOLUTION
	STA LETTERBOX_BOTTOM_START
	BRA @LETTERBOX_SETUP_DONE
@LARGE_LETTERBOX:
	LDA #LETTERBOX_SIZE_LARGE - 1
	STA LETTERBOX_TOP_END
	LDA #SCREEN_Y_RESOLUTION - LETTERBOX_SIZE_LARGE
	STA LETTERBOX_BOTTOM_START
	BRA @LETTERBOX_SETUP_DONE
@MEDIUM_LETTERBOX:
	LDA #LETTERBOX_SIZE_MEDIUM - 1
	STA LETTERBOX_TOP_END
	LDA #SCREEN_Y_RESOLUTION - LETTERBOX_SIZE_MEDIUM
	STA LETTERBOX_BOTTOM_START
	BRA @LETTERBOX_SETUP_DONE
@SMALL_LETTERBOX:
	LDA #LETTERBOX_SIZE_SMALL - 1
	STA LETTERBOX_TOP_END
	LDA #SCREEN_Y_RESOLUTION - LETTERBOX_SIZE_SMALL
	STA LETTERBOX_BOTTOM_START
@LETTERBOX_SETUP_DONE:
	STZ LETTERBOX_EFFECT_ENDING
	LDX #$7000
	STX LETTERBOX_EFFECT_ENDING_BOTTOM
	STX LETTERBOX_EFFECT_ENDING_TOP
	STZ ENABLE_BACKGROUND_DARKENING
	LDA #$FFFF
<<<<<<< HEAD
	STA BACKGROUND_BRIGHTNESS
	LOADPTR BUFFER, @VIRTUAL06
	MOVE_INT @VIRTUAL06, @LOCAL08
	LOADPTR BATTLEBG_GFX_POINTERS, @VIRTUAL0A
	LDA @VIRTUAL02
	OPTIMIZED_MULT @VIRTUAL04, .SIZEOF(bg_layer_config_entry)
=======
	STA UNKNOWN_7EADD2
	LOADPTR UNKNOWN_7F0000, $06
	MOVE_INT $06, $28
	LOADPTR BATTLEBG_GFX_POINTERS, $0A
	LDA $02
	OPTIMIZED_MULT $04, .SIZEOF(bg_layer_config_entry)
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	TAX
	LDA f:BG_DATA_TABLE,X
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	MOVE_INT $28, $06
	MOVE_INT $06, $12
	JSL DECOMP
	LDA CURRENT_BATTLE_GROUP
	CMP #$01DE ;GIYGAS_5 + POKEY
	BNE @UNKNOWN5
	LDY #$3000
	LDX #$5C00
	LDA #BG_TILEMAP_SIZE::NORMAL
	JSL SET_BG2_VRAM_LOCATION
	COPY_TO_VRAM1P $06, $3000, $5000, $00
	BRA @UNKNOWN6
@UNKNOWN5:
	COPY_TO_VRAM1P $06, $1000, $2000, $00
@UNKNOWN6:
	.A16
<<<<<<< HEAD
	LOADPTR BUFFER, @VIRTUAL0A
=======
	LOADPTR UNKNOWN_7F0000, $0A
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0000
	STA [$0A]
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $0A, $06
	COPY_TO_VRAM1P $06, $5800, $800, $03
	MOVE_INT $0A, $06
	COPY_TO_VRAM1P $06, $0000, $800, $03
	.A16
	LOADPTR BG_DATA_TABLE, $06
	MOVE_INT $06, $24
	LDA $02
	OPTIMIZED_MULT $04, 17
	STA $22
	CLC
	ADC $06
	STA $06
	LDA [$06]
	AND #$00FF
	OPTIMIZED_MULT $04, 4
	PHA
	LOADPTR BATTLEBG_ARR_POINTERS, $06
	PLA
	CLC
	ADC $06
	STA $06
	DEREFERENCE_PTR_TO $06, $06
	MOVE_INT $06, $0E
	MOVE_INT $0A, $06
	MOVE_INT $06, $12
	JSL DECOMP
	LDA $22
	INC
	INC
	MOVE_INTX $24, $06
	CLC
	ADC $06
	STA $06
	LDA [$06]
	AND #$00FF
	CMP #$0004
	BNEL @UNKNOWN15
	LDA #$0009
	JSL UNKNOWN_C08D79
	LDA #$0000
	STA $22
	BRA @UNKNOWN9
@UNKNOWN8:
	STORE_INT1632 $06
	CLC
<<<<<<< HEAD
	VAR_ADD_CONST_INT_ASSIGN BUFFER + 1, @VIRTUAL06
=======
	VAR_ADD_CONST_INT_ASSIGN $7F0001, $06
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	SEP #PROC_FLAGS::ACCUM8
	LDA [$06]
	AND #$00DF
	ORA #$0008
	STA [$06]
	REP #PROC_FLAGS::ACCUM8
	LDA $22
	INC
	INC
	STA $22
@UNKNOWN9:
	CMP #$0800
	BCC @UNKNOWN8
<<<<<<< HEAD
	LOADPTR BUFFER, @LOCAL08
	MOVE_INT @LOCAL08, @VIRTUAL06
	COPY_TO_VRAM1P @VIRTUAL06, $5C00, $800, 0
=======
	LOADPTR UNKNOWN_7F0000, $28
	MOVE_INT $28, $06
	COPY_TO_VRAM1P $06, $5C00, $800, $00
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	.A16
	LOADPTR BG_DATA_TABLE, $06
	MOVE_INT $06, $24
	LDA $02
	OPTIMIZED_MULT $04, .SIZEOF(bg_layer_config_entry)
	TAX
	STX $20
	TXA
	CLC
	ADC $06
	STA $06
	STA $0E
	LDA $08
	STA $10
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1)
	JSL UNKNOWN_C2CFE5
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1) + loaded_bg_data::palette_pointer
<<<<<<< HEAD
	STA @VIRTUAL02
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 2
	LDX @VIRTUAL02
=======
	STA $02
	LDA #.LOWORD(CUR_MAP_PAL)
	LDX $02
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	STA __BSS_START__,X
	LDY #.LOWORD(LOADED_BG_DATA_LAYER1) + loaded_bg_data::palette
	STY $1E
	LOADPTR BATTLEBG_PALETTE_POINTERS, $1A
	LDX $20
	TXA
	INC
	MOVE_INTX $24, $06
	MOVE_INTX $06, $0A
	CLC
	ADC $0A
	STA $0A
	MOVE_INT $1A, $06
	LDA [$0A]
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $06
	STA $06
	DEREFERENCE_PTR_TO $06, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette)
	LDY $1E
	TYA
	JSL MEMCPY16
	LDA [$0A]
	AND #$00FF
	ASL
	ASL
	PHA
	MOVE_INT $1A, $0A
	PLA
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette2)
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1) + loaded_bg_data::palette2
	JSL MEMCPY16
	LDY $1E
	TYA
	PROMOTENEARPTRA $06
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0E
	LDX #$0020
	STX $20
	LDX $02
	LDA __BSS_START__,X
	LDX $20
	JSL MEMCPY16
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0002
	STA LOADED_BG_DATA_LAYER1 + loaded_bg_data::target_layer
	LDX #$0000
	REP #PROC_FLAGS::ACCUM8
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1)
	JSL GENERATE_BATTLEBG_FRAME
	LDX #.LOWORD(LOADED_BG_DATA_LAYER2)
	STX $1E
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0000
	STA __BSS_START__,X
	REP #PROC_FLAGS::ACCUM8
<<<<<<< HEAD
	LDA #1
	STA CURRENT_LAYER_CONFIG
=======
	LDA #$0001
	STA UNKNOWN_7EAD8A
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	JSL UNKNOWN_C0AFCD
	LDA #$0017
	STA LETTERBOX_VISIBLE_SCREEN_VALUE
	LDA #$0015
<<<<<<< HEAD
	STA LETTERBOX_NONVISIBLE_SCREEN_VALUE
	LDA @LOCAL09
	STA @VIRTUAL04
=======
	STA UNKNOWN_7EADB0
	LDA $2C
	STA $04
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	BEQL @UNKNOWN23
	LDA $2E
	AND #$0004
	BEQL @UNKNOWN14
<<<<<<< HEAD
	LDA #7
	STA CURRENT_LAYER_CONFIG
=======
	LDA #$0007
	STA UNKNOWN_7EAD8A
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	JSL UNKNOWN_C0AFCD
	LDA $04
	OPTIMIZED_MULT $04, 17
	MOVE_INTX $24, $06
	CLC
	ADC $06
	STA $06
	STA $16
	LDA $08
	STA $18
	LOADPTR BATTLEBG_GFX_POINTERS, $0A
	LDA [$06]
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	MOVE_INT $28, $06
	MOVE_INT $06, $12
	JSL DECOMP
	MOVE_INT $28, $06
	COPY_TO_VRAM1P $06, $0000, $2000, $00
	.A16
	LOADPTR BATTLEBG_ARR_POINTERS, $0A
	MOVE_INT $16, $06
	LDA [$06]
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	MOVE_INT $28, $06
	MOVE_INT $06, $12
	JSL DECOMP
	LDA #$0000
	STA $2E
	BRA @UNKNOWN13
@UNKNOWN12:
	STORE_INT1632 $06
	CLC
<<<<<<< HEAD
	VAR_ADD_CONST_INT_ASSIGN BUFFER + 1, @VIRTUAL06
=======
	VAR_ADD_CONST_INT_ASSIGN $7F0001, $06
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	SEP #PROC_FLAGS::ACCUM8
	LDA [$06]
	AND #$00DF
	ORA #$0010
	STA [$06]
	REP #PROC_FLAGS::ACCUM8
	LDA $2E
	INC
	INC
	STA $2E
@UNKNOWN13:
	CMP #$0800
	BCC @UNKNOWN12
<<<<<<< HEAD
	COPY_TO_VRAM1 BUFFER, $5800, $800, 0
=======
	COPY_TO_VRAM1 UNKNOWN_7F0000, $5800, $800, $00
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	.A16
	LOADPTR BG_DATA_TABLE, $06
	MOVE_INT $06, $28
	LDA $2C
	STA $04
	OPTIMIZED_MULT $04, .SIZEOF(bg_layer_config_entry)
	TAX
	STX $20
	LDA #.LOWORD(LOADED_BG_DATA_LAYER2)
	STA $04
	TXA
	CLC
	ADC $06
	STA $06
	STA $0E
	LDA $08
	STA $10
	LDA $04
	JSL UNKNOWN_C2CFE5
	LDA #.LOWORD(LOADED_BG_DATA_LAYER2) + loaded_bg_data::palette_pointer
<<<<<<< HEAD
	STA @VIRTUAL02
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 4
	LDX @VIRTUAL02
=======
	STA $02
	LDA #.LOWORD(CUR_MAP_PAL) + 64
	LDX $02
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	STA __BSS_START__,X
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0001
	LDX $04
	STA __BSS_START__,X
	LDY #.LOWORD(LOADED_BG_DATA_LAYER2) + loaded_bg_data::palette
	STY $2C
	REP #PROC_FLAGS::ACCUM8
	LOADPTR BATTLEBG_PALETTE_POINTERS, $0A
	LDX $20
	TXA
	INC
	MOVE_INTX $28, $06
	CLC
	ADC $06
	STA $06
	STA $16
	LDA $08
	STA $18
	LDA [$06]
	AND #$00FF
	ASL
	ASL
	MOVE_INTX $0A, $06
	CLC
	ADC $06
	STA $06
	DEREFERENCE_PTR_TO $06, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette)
	LDY $2C
	TYA
	JSL MEMCPY16
	MOVE_INT $16, $06
	LDA [$06]
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette2)
	LDA #.LOWORD(LOADED_BG_DATA_LAYER2) + loaded_bg_data::palette2
	JSL MEMCPY16
	LDY $2C
	TYA
	PROMOTENEARPTRA $06
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0E
	LDX #$0020
	STX $22
	LDX $02
	LDA __BSS_START__,X
	LDX $22
	JSL MEMCPY16
	LDX #$0001
	LDA $04
	JSL GENERATE_BATTLEBG_FRAME
	LDA #$0215
	STA LETTERBOX_VISIBLE_SCREEN_VALUE
	LDA #$0014
	STA LETTERBOX_NONVISIBLE_SCREEN_VALUE
	JMP @UNKNOWN23
@UNKNOWN14:
	LDA $04
	OPTIMIZED_MULT $04, 17
	MOVE_INTX $24, $06
	CLC
	ADC $06
	STA $06
	STA $0E
	LDA $08
	STA $10
	LDX $1E
	TXA
	JSL UNKNOWN_C2CFE5
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0001
	STA LOADED_BG_DATA_LAYER2 + loaded_bg_data::freeze_palette_scrolling
	LDA #$0002
	LDX $1E
	STA __BSS_START__,X
	JMP @UNKNOWN23
@UNKNOWN15:
	.A16
	LDA #$0008
	JSL UNKNOWN_C08D79
	LDY #$6000
	LDX #$7C00
	LDA #BG_TILEMAP_SIZE::NORMAL
	JSL SET_BG1_VRAM_LOCATION
	LDY #$0000
	LDX #$5800
	TYA
	JSL SET_BG2_VRAM_LOCATION
	LDY #$1000
	LDX #$5C00
	LDA #BG_TILEMAP_SIZE::NORMAL
	JSL SET_BG3_VRAM_LOCATION
	LDY #$3000
	LDX #$0C00
	LDA #BG_TILEMAP_SIZE::NORMAL
	JSL SET_BG4_VRAM_LOCATION
	LDA #$0000
	STA $2E
	BRA @UNKNOWN17
@UNKNOWN16:
	STORE_INT1632 $06
	CLC
<<<<<<< HEAD
	VAR_ADD_CONST_INT_ASSIGN BUFFER + 1, @VIRTUAL06
=======
	VAR_ADD_CONST_INT_ASSIGN $7F0001, $06
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	SEP #PROC_FLAGS::ACCUM8
	LDA [$06]
	AND #$00DF
	STA [$06]
	REP #PROC_FLAGS::ACCUM8
	LDA $2E
	INC
	INC
	STA $2E
@UNKNOWN17:
	CMP #$0800
	BCC @UNKNOWN16
<<<<<<< HEAD
	LOADPTR BUFFER, @VIRTUAL06
	MOVE_INT @VIRTUAL06, @LOCAL07
	COPY_TO_VRAM1P @VIRTUAL06, $5C00, $800, 0
=======
	LOADPTR UNKNOWN_7F0000, $06
	MOVE_INT $06, $24
	COPY_TO_VRAM1P $06, $5C00, $800, $00
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	.A16
	LOADPTR BG_DATA_TABLE, $28
	LDA $02
	OPTIMIZED_MULT $04, .SIZEOF(bg_layer_config_entry)
	TAX
	STX $20
	MOVE_INT $28, $06
	TXA
	CLC
	ADC $06
	STA $06
	STA $0E
	LDA $08
	STA $10
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1)
	JSL UNKNOWN_C2CFE5
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1) + loaded_bg_data::palette_pointer
<<<<<<< HEAD
	STA @VIRTUAL02
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 4
	LDX @VIRTUAL02
=======
	STA $02
	LDA #.LOWORD(CUR_MAP_PAL) + 64
	LDX $02
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	STA __BSS_START__,X
	LDY #.LOWORD(LOADED_BG_DATA_LAYER1) + loaded_bg_data::palette
	STY $1E
	LOADPTR BATTLEBG_PALETTE_POINTERS, $1A
	MOVE_INT $28, $0A
	LDX $20
	TXA
	INC
	CLC
	ADC $0A
	STA $0A
	MOVE_INT $1A, $06
	LDA [$0A]
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $06
	STA $06
	DEREFERENCE_PTR_TO $06, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette)
	LDY $1E
	TYA
	JSL MEMCPY16
	LDA [$0A]
	AND #$00FF
	ASL
	ASL
	PHA
	MOVE_INT $1A, $0A
	PLA
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette2)
	LDA #.LOWORD(LOADED_BG_DATA_LAYER1) + loaded_bg_data::palette2
	JSL MEMCPY16
	LDY $1E
	TYA
	PROMOTENEARPTRA $06
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0E
	LDX #$0020
	STX $20
	LDX $02
	LDA __BSS_START__,X
	LDX $20
	JSL MEMCPY16
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0003
	STA LOADED_BG_DATA_LAYER1 + loaded_bg_data::target_layer
	REP #PROC_FLAGS::ACCUM8
	LDA $2C
	STA $04
	BEQL @UNKNOWN21
<<<<<<< HEAD
	LDA #3
	STA CURRENT_LAYER_CONFIG
=======
	LDA #$0003
	STA UNKNOWN_7EAD8A
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	JSL UNKNOWN_C0AFCD
	MOVE_INT $28, $0A
	LDA $04
	OPTIMIZED_MULT $04, 17
	CLC
	ADC $0A
	STA $0A
	LOADPTR BATTLEBG_GFX_POINTERS, $06
	LDA [$0A]
	AND #$00FF
	OPTIMIZED_MULT $04, 4
	CLC
	ADC $06
	STA $06
	DEREFERENCE_PTR_TO $06, $06
	MOVE_INT $06, $0E
	MOVE_INT $24, $06
	MOVE_INT $06, $12
	JSL DECOMP
	COPY_TO_VRAM1P $06, $3000, $1800, $00
	.A16
	LDA [$0A]
	AND #$00FF
	ASL
	ASL
	PHA
	LOADPTR BATTLEBG_ARR_POINTERS, $0A
	PLA
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	MOVE_INT $24, $06
	MOVE_INT $06, $12
	JSL DECOMP
	LDA #$0000
	STA $2E
	BRA @UNKNOWN20
@UNKNOWN19:
	STORE_INT1632 $06
	CLC
<<<<<<< HEAD
	VAR_ADD_CONST_INT_ASSIGN BUFFER + 1, @VIRTUAL06
=======
	VAR_ADD_CONST_INT_ASSIGN $7F0001, $06
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	SEP #PROC_FLAGS::ACCUM8
	LDA [$06]
	AND #$00DF
	STA [$06]
	REP #PROC_FLAGS::ACCUM8
	LDA $2E
	INC
	INC
	STA $2E
@UNKNOWN20:
	CMP #$0800
	BCC @UNKNOWN19
<<<<<<< HEAD
	COPY_TO_VRAM1 BUFFER, $C00, $800, 0
=======
	COPY_TO_VRAM1 UNKNOWN_7F0000, $C00, $800, $00
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	.A16
	LOADPTR BG_DATA_TABLE, $06
	MOVE_INT $06, $28
	LDA $2C
	STA $04
	OPTIMIZED_MULT $04, .SIZEOF(bg_layer_config_entry)
	TAX
	STX $20
	LDA #.LOWORD(LOADED_BG_DATA_LAYER2)
	STA $04
	TXA
	CLC
	ADC $06
	STA $06
	STA $0E
	LDA $08
	STA $10
	LDA $04
	JSL UNKNOWN_C2CFE5
	LDA #.LOWORD(LOADED_BG_DATA_LAYER2) + loaded_bg_data::palette_pointer
<<<<<<< HEAD
	STA @VIRTUAL02
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 6
	LDX @VIRTUAL02
=======
	STA $02
	LDA #.LOWORD(CUR_MAP_PAL) + 128
	LDX $02
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
	STA __BSS_START__,X
	LDY #.LOWORD(LOADED_BG_DATA_LAYER2) + loaded_bg_data::palette
	STY $2C
	LOADPTR BATTLEBG_PALETTE_POINTERS, $0A
	LDX $20
	TXA
	INC
	MOVE_INTX $28, $06
	CLC
	ADC $06
	STA $06
	STA $16
	LDA $08
	STA $18
	LDA [$06]
	AND #$00FF
	ASL
	ASL
	MOVE_INTX $0A, $06
	CLC
	ADC $06
	STA $06
	DEREFERENCE_PTR_TO $06, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette)
	LDY $2C
	TYA
	JSL MEMCPY16
	MOVE_INT $16, $06
	LDA [$06]
	AND #$00FF
	ASL
	ASL
	CLC
	ADC $0A
	STA $0A
	DEREFERENCE_PTR_TO $0A, $06
	MOVE_INT $06, $0E
	LDX #.SIZEOF(loaded_bg_data::palette2)
	LDA #.LOWORD(LOADED_BG_DATA_LAYER2) + loaded_bg_data::palette2
	JSL MEMCPY16
	LDY $2C
	TYA
	PROMOTENEARPTRA $06
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0E
	LDX #$0020
	STX $20
	LDX $02
	LDA __BSS_START__,X
	LDX $20
	JSL MEMCPY16
	SEP #PROC_FLAGS::ACCUM8
	LDA #$0004
	LDX $04
	STA __BSS_START__,X
	BRA @UNKNOWN22
@UNKNOWN21:
	SEP #PROC_FLAGS::ACCUM8
	STZ LOADED_BG_DATA_LAYER2 + loaded_bg_data::target_layer
@UNKNOWN22:
	REP #PROC_FLAGS::ACCUM8
	LDA #$0817
	STA LETTERBOX_VISIBLE_SCREEN_VALUE
	LDA #$0013
	STA LETTERBOX_NONVISIBLE_SCREEN_VALUE
@UNKNOWN23:
	REP #PROC_FLAGS::ACCUM8
	STZ DISTORT_30FPS
	LDA LOADED_BG_DATA_LAYER2
	AND #$00FF
	BEQ @UNKNOWN24
	LDA LOADED_BG_DATA_LAYER2 + loaded_bg_data::distortion_styles
	AND #$00FF
	BEQ @UNKNOWN24
<<<<<<< HEAD
	LDA #1
	STA DISTORT_30FPS
=======
	LDA #$0001
	STA UNKNOWN_7EADAC
>>>>>>> parent of e89e3811 (switch to new stack macro, delete old one and replace some magic numbers)
@UNKNOWN24:
	JSL UNKNOWN_C2D0AC
	LDA LETTERBOX_TOP_END
	BEQ @UNKNOWN25
	LDA #$0002
	JSL UNKNOWN_C429E8
@UNKNOWN25:
	JSL UNKNOWN_C2E9ED
	PLD
	RTL
