
UNKNOWN_C2FEF9:
	BEGIN_C_FUNCTION_FAR
	STACK_RESERVE_VARS
	STACK_RESERVE_INT32
	STACK_RESERVE_INT16
	STACK_RESERVE_PARAM_INT16 ;int attackType
	END_STACK_VARS
	TAX
	TXY
	TXA
	DEC
	STA @LOCAL01
	CPY #0
	BEQ @UNKNOWN0
	LOADPTR UNKNOWN_C3F8F1, @VIRTUAL06
	LDA @LOCAL01
	OPTIMIZED_MULT @VIRTUAL04, BPP4PALETTE_SIZE
	CLC
	ADC @VIRTUAL06
	STA @VIRTUAL06
	STA @LOCAL00
	LDA @VIRTUAL06+2
	STA @LOCAL00+2
	LDX #BPP4PALETTE_SIZE
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 12
	JSL MEMCPY16
	MOVE_INT @VIRTUAL06, @LOCAL00
	LDX #BPP4PALETTE_SIZE
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 13
	JSL MEMCPY16
	MOVE_INT @VIRTUAL06, @LOCAL00
	LDX #BPP4PALETTE_SIZE
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 14
	JSL MEMCPY16
	MOVE_INT @VIRTUAL06, @LOCAL00
	LDX #BPP4PALETTE_SIZE
	LDA #.LOWORD(PALETTES) + BPP4PALETTE_SIZE * 15
	JSL MEMCPY16
	LDA #16
	JSL UNKNOWN_C0856B
	BRA @UNKNOWN3
@UNKNOWN0:
	LDA #BPP4PALETTE_SIZE * 4
	STA @LOCAL01
	BRA @UNKNOWN2
@UNKNOWN1:
	ASL
	TAX
	LDA PALETTES,X
	LSR
	LSR ;divide entire colour by two. normally, this would cause the lower two bits of each channel to bleed into the next, but...
	AND #(7 << 10) +(7 << 5) + 7 ;we keep only the bottom 3 bits of each colour channel. combined, this just darkens the colour.
	STA PALETTES + (BPP4PALETTE_SIZE * 4),X
	LDA @LOCAL01
	INC
	STA @LOCAL01
@UNKNOWN2:
	CMP #BPP4PALETTE_SIZE * 6
	BCC @UNKNOWN1
	LDA #16
	JSL UNKNOWN_C0856B
@UNKNOWN3:
	END_C_FUNCTION
